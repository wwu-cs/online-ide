# set up environment
user www-data;
worker_processes auto;
pid /run/resty.pid;

events {
  worker_connections 1024;
}

# log fatal errors
error_log logs/error.log;


http {

  # allow for upgrading to websockets on request
  map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
  }

  # parameters set for websockets
  sendfile on;
  tcp_nopush on;
  keepalive_timeout 65;

  # turn off cache for development only
  lua_code_cache on;
  lua_socket_log_errors off;

  server {

    # server port
    listen 80;

    # LOGIN PAGE ROUTE
    #  this is a static page, but we use rewrite to send
    #  people with a login cookie directly to the dashboard
    location = / {
      rewrite_by_lua_block {
        if ngx.var.cookie_codeLogin then
	    ngx.redirect("/dashboard/")
	end	    
      }
      proxy_pass http://127.0.0.1/login.html;
    }
    
    # STATIC ROUTES
    #   main location for all static content, including
    #   the login page
    location / {
      include  /usr/local/openresty/nginx/conf/mime.types;
      alias html/;
    }    
    
    # LOGIN ROUTE
    #   uses LDAP to attept to login user resulting in:
    #     - a token as a cookie and redirecting to /dashboard/ on success
    #     - redirecting to /?failed=true on failure
    location /login/ {
      content_by_lua_file lua/login.lua;
    }

    # DASHBOARD ROUTE
    #  if login cookie is valid, displays list of available workspaces
    #  and images for the user, otherwise redirects to /, otherwise
    #  redirects them to /logout/ route
    location = /dashboard/ {
      content_by_lua_file lua/dashboard.lua;
    }    
    
    # LOGOUT ROUTE
    #  logs a user out by deleting login cookie in browser and locally
    #  in the Redis key store
    location = /logout/ {
      content_by_lua_file lua/logout.lua;
    }

    # CREATE ROUTE
    #  in two parts:
    #    - part one javascript does the create then signals the page when ready
    #    - part two loads an html page w/call to part one javascript
    location /create/process.js {
      content_by_lua_file lua/create_process.lua;
    }
    location /create/ {
      content_by_lua_file lua/create_init.lua;
    }

    # CONNECT ROUTE
    #  this is where we connect to a container by id after checking ownership
    location /connect/ {
      set $port "";
      set $path "";
      rewrite_by_lua_file lua/connect.lua;
      proxy_pass http://127.0.0.1:$port/$path;
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;      
    }

    # STOP ROUTE
    #  requests that we stop and remove a container, redirecting
    #  to the dashboard on success
    location /stop/ {
      content_by_lua_file lua/stop.lua;
    }
    
    # ADMIN ROUTE
    #  available to admins only (checked each time), this route
    #  presents a table of all active workspaces
    location /admin/ {
      content_by_lua_file lua/admin.lua;
    }

    # ERROR ROUTE
    #  a place to redirect and process errors from within a rewrite_by_lua
    #  block (where we can't send content)
    location /error/ {
      content_by_lua_file lua/error.lua;
    }

    # DOCKER API ROUTE
    #  this internal route allows for access to the docker API
    #  but only opens it up to the localhost
    location /docker/ {
      allow 127.0.0.1;
      deny all;
      proxy_pass http://127.0.0.1:8101/v1.39/;
    }

  }
  
}
